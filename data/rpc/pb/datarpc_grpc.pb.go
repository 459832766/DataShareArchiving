// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: datarpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Datarpc_DataFakeDelete_FullMethodName = "/datarpc.Datarpc/DataFakeDelete"
	Datarpc_ListDataByPath_FullMethodName = "/datarpc.Datarpc/ListDataByPath"
)

// DatarpcClient is the client API for Datarpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatarpcClient interface {
	DataFakeDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListDataByPath(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type datarpcClient struct {
	cc grpc.ClientConnInterface
}

func NewDatarpcClient(cc grpc.ClientConnInterface) DatarpcClient {
	return &datarpcClient{cc}
}

func (c *datarpcClient) DataFakeDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Datarpc_DataFakeDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datarpcClient) ListDataByPath(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, Datarpc_ListDataByPath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatarpcServer is the server API for Datarpc service.
// All implementations must embed UnimplementedDatarpcServer
// for forward compatibility
type DatarpcServer interface {
	DataFakeDelete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	ListDataByPath(context.Context, *QueryRequest) (*QueryResponse, error)
	mustEmbedUnimplementedDatarpcServer()
}

// UnimplementedDatarpcServer must be embedded to have forward compatible implementations.
type UnimplementedDatarpcServer struct {
}

func (UnimplementedDatarpcServer) DataFakeDelete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataFakeDelete not implemented")
}
func (UnimplementedDatarpcServer) ListDataByPath(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataByPath not implemented")
}
func (UnimplementedDatarpcServer) mustEmbedUnimplementedDatarpcServer() {}

// UnsafeDatarpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatarpcServer will
// result in compilation errors.
type UnsafeDatarpcServer interface {
	mustEmbedUnimplementedDatarpcServer()
}

func RegisterDatarpcServer(s grpc.ServiceRegistrar, srv DatarpcServer) {
	s.RegisterService(&Datarpc_ServiceDesc, srv)
}

func _Datarpc_DataFakeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatarpcServer).DataFakeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datarpc_DataFakeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatarpcServer).DataFakeDelete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datarpc_ListDataByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatarpcServer).ListDataByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datarpc_ListDataByPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatarpcServer).ListDataByPath(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Datarpc_ServiceDesc is the grpc.ServiceDesc for Datarpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datarpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datarpc.Datarpc",
	HandlerType: (*DatarpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataFakeDelete",
			Handler:    _Datarpc_DataFakeDelete_Handler,
		},
		{
			MethodName: "ListDataByPath",
			Handler:    _Datarpc_ListDataByPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datarpc.proto",
}
